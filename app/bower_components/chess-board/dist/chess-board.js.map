{"version":3,"file":"chess-board.js","sources":["@traceur/generated/TemplateParser/0","chess-board.js","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/3"],"names":[],"mappings":";AAAI,GAAA,aAAA;ACCJ,WAAE,KAAA;AAEE,KAAA,MAAA;AACJ,IAAA,EAAG,WAAA,GAAe,EAAC,WAAA,CAAA,SAAA,CAAuB;AACxC,SAAA,EAAQ,SAAA,CAAA,cAAA,CAAA,aAAA;AAAA,GAAA,KACH;AACL,SAAA,EAAQ,SAAA,CAAA,aAAA,CAAA,aAAA;AAAA;AAGN,KAAA,YAAA,EAAc,MAAA,CAAA,aAAmB,CAAC,gBAAA,CAAA;AAElC,YAAA,EAAS;AACP,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,oBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,sBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,sBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,oBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,qBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,oBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,oBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,sBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,sBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,oBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,qBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,oBAAA;AAAA,OAAA;AAGzB,eAAA,EAAY;AACV,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,uBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,yBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,yBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,uBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,wBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,uBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,uBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,yBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,yBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,uBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,wBAAA,CAAA;AACvB,SAAA,CAAG,MAAA,CAAA,aAAmB,CAAC,uBAAA;AAAA,OAAA;AAGzB,cAAA,EAAW,MAAA,CAAA,aAAmB,CAAC,qBAAA,CAAA;AAC/B,mBAAA,EAAgB,MAAA,CAAA,aAAmB,CAAC,0BAAA,CAAA;AAEpC,WAAA,EAAQ;AAAC,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG;AAAA,OAAA;AACtD,WAAA,EAAQ;AAAC,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG,EAAA;AAAG,SAAA,CAAG;AAAA,OAAA;AAEtD,KAAA,kBAAA,EAAoB,SAAS,kBAAA,CAAkB,IAAA,CAAM;AACvD,SAAA,EAAO,IAAA,CAAA,UAAA,CAAiB;AAAE,UAAA,CAAA,WAAgB,CAAC,IAAA,CAAA,UAAA,CAAA;AAAA;AAAA,GAAA;ACjDzC,kBDoDJ,SAAM,WAAA,CAEQ,CAAE;AACZ,QAAA,CAAA,QAAA,EAAgB,EAAC,CAAC,IAAA,CAAA,UAAA,CAAA,OAAA;AAElB,QAAA,CAAA,MAAA,EAAc,KAAA;AACd,QAAA,CAAA,UAAA,EAAkB,KAAA,CAAA,gBAAqB,CAAA,CAAA;AACvC,QAAA,CAAA,GAAA,EAAW,KAAA,CAAA,SAAA,CAAA,IAAmB,CAAA,CAAA;AAE9B,QAAA,CAAA,UAAA,EAAkB,KAAA,CAAA,gBAAqB,CAAA,CAAA;AACvC,QAAA,CAAA,UAAA,CAAA,WAA2B,CAAC,aAAA,CAAA,OAAA,CAAA,SAA+B,CAAC,IAAA,CAAA,CAAA;AAAA,GAAA;AE9DhE,GAAC,eAAA,CAAA,WAAA,CAA4B;AFiE3B,oBAAA,CAAA,SAAA,CAAiB,SAAA,CAAW,OAAA,CAAQ,OAAA,CAAQ;AAC1C,QAAA,EAAG,SAAA,IAAc,UAAA,CAAU;AACrB,WAAA,IAAA,EAAM,KAAA,CAAA,GAAA;AAEV,YAAA,CAAA,QAAA,EAAgB,EAAC,CAAC,IAAA,CAAA,UAAA,CAAA,OAAA;AAClB,yBAAiB,CAAC,IAAA,CAAA,UAAA,CAAA;AAElB,YAAA,CAAA,GAAA,EAAW,IAAA;AAAA;AAAA,KAAA;AAOf,cAAA,CAAA,SAAA,CAAW,CAAE;AACP,SAAA,MAAA,EAAQ,SAAA,CAAA,OAAA,CAAA,SAA0B,CAAC,IAAA,CAAA;AACvC,uBAAiB,CAAC,IAAA,CAAA,UAAA,CAAA;AAClB,UAAA,CAAA,UAAA,CAAA,WAA2B,CAAC,KAAA,CAAA;AAC5B,UAAA,CAAA,MAAA,EAAc,KAAA,CAAA,UAAA,CAAA,aAA6B,CAAC,aAAA,CAAA;AAAA,KAAA;AAS9C,QAAA,CAAA,SAAA,CAAK,IAAA,CAAM,GAAA;gBACmB,KAAA,CAAA,YAAiB,CAAC,IAAA,CAAA;AAAzC,kBAAA;AAAU,kBAAA;AACX,kBAAA,EAAW,KAAA,CAAA,MAAA,CAAA,IAAA,CAAiB,QAAA,CAAA,CAAA,KAAA,CAAgB,QAAA,CAAA;gBAExB,KAAA,CAAA,YAAiB,CAAC,EAAA,CAAA;AAArC,gBAAA;AAAQ,gBAAA;AACT,gBAAA,EAAS,KAAA,CAAA,MAAA,CAAA,IAAA,CAAiB,MAAA,CAAA,CAAA,KAAA,CAAc,MAAA,CAAA;AAExC,eAAA,EAAQ,SAAA,CAAA,aAAsB,CAAC,QAAA,CAAA;AAC/B,oBAAA,EAAa,YAAA,CAAA,OAAA,CAAA,SAA6B,CAAC,IAAA,CAAA;AAE/C,QAAA,EAAG,CAAC,KAAA,CAAO;AACT,aAAM,wCAAA;AAAA;AAGR,uBAAiB,CAAC,MAAA,CAAA;AAClB,uBAAiB,CAAC,QAAA,CAAA;AAElB,YAAA,CAAA,WAAkB,CAAC,KAAA,CAAA;AACnB,cAAA,CAAA,WAAoB,CAAC,UAAA,CAAA;AAAA,KAAA;AAQvB,SAAA,CAAA,SAAA,CAAM,MAAA;gBACgB,KAAA,CAAA,YAAiB,CAAC,MAAA,CAAA;AAAjC,cAAA;AAAM,cAAA;AACP,mBAAA,EAAY,KAAA,CAAA,MAAA,CAAA,IAAA,CAAiB,IAAA,CAAA,CAAA,KAAA,CAAY,IAAA,CAAA;AAE7C,uBAAiB,CAAC,SAAA,CAAA;AAAA,KAAA;AASpB,OAAA,CAAA,SAAA,CAAI,MAAA,CAAQ,MAAA;gBACU,KAAA,CAAA,YAAiB,CAAC,MAAA,CAAA;AAAjC,cAAA;AAAM,cAAA;AACP,mBAAA,EAAY,KAAA,CAAA,MAAA,CAAA,IAAA,CAAiB,IAAA,CAAA,CAAA,KAAA,CAAY,IAAA,CAAA;AAE7C,uBAAiB,CAAC,SAAA,CAAA;AAClB,UAAA,CAAA,SAAc,CAAC,IAAA,CAAA,MAAA,CAAa,KAAA,CAAM,KAAA,CAAM,MAAA,CAAO,KAAA,CAAA,QAAA,CAAA;AAAA,KAAA;AAGjD,gBAAA,CAAA,SAAA,CAAa,IAAA;gBACQ,KAAA;AAAd,cAAA;AAAM,cAAA;AACX,YAAO,EAAC,KAAA,CAAM,IAAA,CAAA,CAAO,MAAA,CAAM,IAAA,CAAA,CAAA;AAAA,KAAA;AAG7B,aAAA,CAAA,SAAA,CAAU,KAAA,CAAO,KAAA,CAAM,KAAA,CAAM,MAAA,CAAsB;SAAf,QAAA,4CAAQ,MAAA;AACtC,SAAA,IAAA,EAAM,MAAA,CAAA,IAAA,CAAW,IAAA,CAAA;AACjB,cAAA,EAAO,IAAA,CAAA,KAAA,CAAU,IAAA,CAAA;AAErB,uBAAiB,CAAC,IAAA,CAAA;AAGlB,QAAA,EAAG,CAAC,CAAC,IAAA,WAAgB,KAAA,CAAA,CAAO;AAC1B,YAAA,EAAO,kBAAA,CAAA,IAAsB,CAAC,IAAA,CAAA;AAAA;AAGhC,UAAA,CAAA,WAAgB,CAAC,IAAA,CAAA,cAAmB,CAAC,KAAA,CAAO,QAAA,CAAA,CAAA;AAAA,KAAA;AAG9C,kBAAA,CAAA,SAAA,CAAe,KAAA,CAAqB;SAAd,QAAA,4CAAQ,MAAA;AACxB,SAAA,MAAA;AACJ,QAAA,EAAG,MAAA,CAAO,KAAA,CAAA,CAAQ;AAChB,UAAA,EAAG,CAAC,OAAA,CAAS;AACX,eAAA,EAAQ,UAAA,CAAU,KAAA,CAAA,CAAA,OAAA,CAAA,SAAwB,CAAC,IAAA,CAAA;AAAA,SAAA,KACtC;AACL,eAAA,EAAQ,OAAA,CAAO,KAAA,CAAA,CAAA,OAAA,CAAA,SAAwB,CAAC,IAAA,CAAA;AAAA;AAAA,OAAA,KAErC;AACL,aAAA,EAAQ,YAAA,CAAA,OAAA,CAAA,SAA6B,CAAC,IAAA,CAAA;AAAA;AAExC,YAAO,MAAA;AAAA,KAAA;AAST,OAAI,IAAA,CAAI,GAAA,CAAK;AACX,QAAA,EAAG,CAAC,GAAA,CAAK,OAAA;AACT,QAAA,EAAG,GAAA,IAAQ,QAAA,CAAS,IAAA,EAAM,8CAAA;AAEtB,SAAA,MAAA,EAAQ,SAAA,CAAA,OAAA,CAAA,SAA0B,CAAC,IAAA,CAAA;AAEnC,eAAA,EAAQ,MAAA,CAAA,QAAA,CAAe,CAAA,CAAA;AAEvB,cAAA,EAAO,EAAA;AACP,cAAA,EAAO,EAAA;AACP,kBAAA,EAAW,EAAA;AAEX,iBAAA;AAAS,eAAA;AAAO,eAAA;AAAO,WAAA;AAE3B,WAAA,EAAM,QAAA,EAAW,IAAA,CAAA,MAAA,CAAW;AAC1B,eAAA,EAAU,IAAA,CAAI,QAAA,CAAA;AACd,aAAA,EAAQ,KAAA;AAER,UAAA,EAAG,OAAA,IAAY,IAAA,CAAI;AACjB,eAAA;AAAA;AAEF,UAAA,EAAG,OAAA,IAAY,IAAA,CAAI;AACjB,cAAA,EAAA;AACA,cAAA,EAAO,EAAA;AACP,kBAAA,EAAA;AACA,kBAAA;AAAA;AAGF,UAAA,EAAG,KAAK,CAAC,QAAQ,CAAC,OAAA,CAAS,GAAA,CAAA,CAAA,CAAM;AAC/B,cAAA,CAAA,SAAc,CAAC,KAAA,CAAO,KAAA,CAAM,KAAA,CAAM,QAAA,CAAS,KAAA,CAAA,QAAA,CAAA;AAC3C,cAAA,EAAA;AAAA,SAAA,KACK;AACL,eAAA,EAAQ,SAAQ,CAAC,OAAA,CAAS,GAAA,CAAA;AAC1B,aAAA,EAAI,CAAA,EAAI,EAAA,CAAG,EAAA,EAAI,MAAA,CAAO,EAAA,EAAA,CAAK;AACzB,gBAAA,CAAA,SAAc,CAAC,KAAA,CAAO,KAAA,CAAM,KAAA,CAAM,GAAA,CAAI,KAAA,CAAA,QAAA,CAAA;AACtC,gBAAA,EAAA;AAAA;AAAA;AAIJ,gBAAA,EAAA;AAAA;AAEF,uBAAiB,CAAC,IAAA,CAAA,UAAA,CAAA;AAClB,UAAA,CAAA,UAAA,CAAA,WAA2B,CAAC,KAAA,CAAA;AAC5B,UAAA,CAAA,MAAA,EAAc,KAAA,CAAA,UAAA,CAAA,aAA6B,CAAC,aAAA,CAAA;AAAA,KAAA;AAM9C,OAAI,IAAA,CAAA,CAAM;AACJ,SAAA,IAAA,EAAM,EAAA,CAAA;AACN,WAAA;AAAG,WAAA;AAAG,eAAA;AAAO,cAAA;AAAM,eAAA;AAEvB,SAAA,EAAI,CAAA,EAAI,EAAA,CAAG,EAAA,EAAI,EAAA,CAAG,EAAA,EAAA,CAAK;AACrB,aAAA,EAAQ,EAAA;AACR,WAAA,EAAI,CAAA,EAAE,EAAA,CAAG,EAAA,EAAI,EAAA,CAAG,EAAA,EAAA,CAAK;AACnB,cAAA,EAAO,KAAA,CAAA,MAAA,CAAA,IAAA,CAAiB,CAAA,CAAA,CAAA,KAAA,CAAS,CAAA,CAAA;AACjC,eAAA,EAAQ,KAAA,CAAA,aAAkB,CAAC,SAAA,CAAA;AAE3B,YAAA,EAAG,KAAA,CAAO;AACR,cAAA,EAAG,KAAA,EAAQ,EAAA,CAAG;AACZ,iBAAA,CAAA,IAAQ,CAAC,KAAA,CAAA;AACT,mBAAA,EAAQ,EAAA;AAAA;AAEV,eAAA,CAAA,IAAQ,CAAC,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,KAAA,CAAA;AAAA,WAAA,KACJ;AACL,iBAAA,EAAA;AAAA;AAAA;AAKJ,UAAA,EAAG,KAAA,EAAQ,EAAA,CAAG;AACZ,aAAA,CAAA,IAAQ,CAAC,KAAA,CAAA;AAAA;AAEX,WAAA,CAAA,IAAQ,CAAC,GAAA,CAAA;AAAA;AAEX,SAAA,CAAA,GAAO,CAAA,CAAA;AACP,YAAO,IAAA,CAAA,IAAQ,CAAC,EAAA,CAAA;AAAA;AAAA,GAAA,KA3MK,YAAA,CAAA;AAgNzB,IAAA,EAAG,QAAA,CAAA,SAAA,CAAoB;AACjB,OAAA,cAAA,EAAgB,SAAA,CAAA,OAAA,CAAA,SAA0B,CAAC,IAAA,CAAA;AAC3C,OAAA,WAAA,EAAa,cAAA,CAAA,OAAA,CAAA,SAA+B,CAAC,IAAA,CAAA;AACjD,YAAA,CAAA,SAAA,CAAA,WAA8B,CAAC,aAAA,CAAe,cAAA,CAAe,GAAA,CAAA;AAC7D,YAAA,CAAA,SAAA,CAAA,WAA8B,CAAC,UAAA,CAAY,cAAA,CAAe,GAAA,CAAA;AAAA;AAK5D,YAAA,CAAA,SAAA,CAAA,eAAA,EAAuC,WAAA,CAAA,SAAA,CAAA,WAAA;AACvC,YAAA,CAAA,SAAA,CAAA,wBAAA,EAAgD,WAAA,CAAA,SAAA,CAAA,gBAAA;AAChD,YAAA,EAAa,SAAA,CAAA,eAAwB,CAAC,aAAA,CAAe,WAAA,CAAA;AAErD,OAAA,CAAA,UAAA,EAAmB,WAAA;AAAA,CAAA,CAAA,CAEjB,CAAC,MAAA,CAAA","sourcesContent":["var __moduleName = $__placeholder__0;","/* jshint esnext: true*/\n((scope) => {\n\nvar owner;\nif(HTMLImports && !HTMLImports.useNative) {\n  owner = document._currentScript.ownerDocument;\n} else {\n  owner = document.currentScript.ownerDocument;\n}\n\nvar emptySquare = owner.querySelector(\"#emptyTemplate\"),\n\n    pieces = {\n      P: owner.querySelector(\"#whitePawnTemplate\"),      // ♙ white\n      N: owner.querySelector(\"#whiteKnightTemplate\"),    // ♘\n      B: owner.querySelector(\"#whiteBishopTemplate\"),    // ♗\n      R: owner.querySelector(\"#whiteRookTemplate\"),      // ♖\n      Q: owner.querySelector(\"#whiteQueenTemplate\"),     // ♕\n      K: owner.querySelector(\"#whiteKingTemplate\"),      // ♔\n      p: owner.querySelector(\"#blackPawnTemplate\"),      // ♟ black\n      n: owner.querySelector(\"#blackKnightTemplate\"),    // ♞\n      b: owner.querySelector(\"#blackBishopTemplate\"),    // ♝\n      r: owner.querySelector(\"#blackRookTemplate\"),      // ♜\n      q: owner.querySelector(\"#blackQueenTemplate\"),     // ♛\n      k: owner.querySelector(\"#blackKingTemplate\")       // ♚\n    },\n\n    svgPieces = {\n      P: owner.querySelector(\"#whitePawnSvgTemplate\"),   // ♙ white\n      N: owner.querySelector(\"#whiteKnightSvgTemplate\"), // ♘\n      B: owner.querySelector(\"#whiteBishopSvgTemplate\"), // ♗\n      R: owner.querySelector(\"#whiteRookSvgTemplate\"),   // ♖\n      Q: owner.querySelector(\"#whiteQueenSvgTemplate\"),  // ♕\n      K: owner.querySelector(\"#whiteKingSvgTemplate\"),   // ♔\n      p: owner.querySelector(\"#blackPawnSvgTemplate\"),   // ♟ black\n      n: owner.querySelector(\"#blackKnightSvgTemplate\"), // ♞\n      b: owner.querySelector(\"#blackBishopSvgTemplate\"), // ♝\n      r: owner.querySelector(\"#blackRookSvgTemplate\"),   // ♜\n      q: owner.querySelector(\"#blackQueenSvgTemplate\"),  // ♛\n      k: owner.querySelector(\"#blackKingSvgTemplate\")    // ♚\n    },\n\n    template = owner.querySelector(\"#chessBoardTemplate\"),\n    frameTemplate = owner.querySelector(\"#chessBoardFrameTemplate\"),\n\n    ranks = {1: 7, 2: 6, 3: 5, 4: 4, 5: 3, 6: 2, 7: 1, 8: 0},\n    files = {a: 0, b: 1, c: 2, d: 3, e: 4, f: 5, g: 6, h: 7};\n\nvar removeNodeContent = function removeNodeContent(node) {\n  while (node.firstChild) { node.removeChild(node.firstChild); }\n};\n\nclass ChessBoard extends HTMLElement {\n\n  constructor() {\n    this._unicode = !!this.attributes.unicode;\n\n    this._board = null; // keep a reference to the board table.\n    this._boardRoot = this.createShadowRoot();\n    this.fen = this.innerHTML.trim();\n\n    this._frameRoot = this.createShadowRoot();\n    this._frameRoot.appendChild(frameTemplate.content.cloneNode(true));\n  }\n\n  attributeChanged(attribute, oldVal, newVal) {\n    if(attribute === 'unicode'){\n      var fen = this.fen;\n\n      this._unicode = !!this.attributes.unicode;\n      removeNodeContent(this._boardRoot);\n\n      this.fen = fen;\n    }\n  }\n\n  /**\n   * Replaces the current board with an empty one.\n   */\n  clearBoard() {\n    var clone = template.content.cloneNode(true);\n    removeNodeContent(this._boardRoot);\n    this._boardRoot.appendChild(clone);\n    this._board = this._boardRoot.querySelector(\".chessBoard\");\n  }\n\n  /**\n   * Moves a piece.\n   *\n   * @param {string} from - The square to move from. Eg: \"a2\"\n   * @param {string} to - The square to move to. Eg: \"a3\"\n   */\n  move(from, to) {\n    var [fromFile, fromRank]  = this._getFileRank(from),\n        fromCell = this._board.rows[fromRank].cells[fromFile],\n\n        [toFile, toRank]  = this._getFileRank(to),\n        toCell = this._board.rows[toRank].cells[toFile],\n\n        piece = fromCell.querySelector(\".piece\"),\n        emptyPiece = emptySquare.content.cloneNode(true);\n\n    if(!piece) {\n      throw \"Move Error: the from square was empty\";\n    }\n\n    removeNodeContent(toCell);\n    removeNodeContent(fromCell);\n\n    toCell.appendChild(piece);\n    fromCell.appendChild(emptyPiece);\n  }\n\n  /**\n   * Removes the piece at the given square.\n   *\n   * @param {string} square - The square. Eg: \"a2\"\n   */\n  clear(square) {\n    var [file, rank]  = this._getFileRank(square),\n        boardCell = this._board.rows[rank].cells[file];\n\n    removeNodeContent(boardCell);\n  }\n\n  /**\n   * Places a piece in the given square.\n   *\n   * @param {string} square - The square. Eg: \"a2\"\n   * @param {string} piece - the ascii representation of a piece. Eg: \"K\"\n   */\n  put(square, piece) {\n    var [file, rank]  = this._getFileRank(square),\n        boardCell = this._board.rows[rank].cells[file];\n\n    removeNodeContent(boardCell);\n    this._setPiece(this._board, file, rank, piece, this._unicode);\n  }\n\n  _getFileRank(cell) {\n    var [file, rank] = cell;\n    return [files[file], ranks[rank]];\n  }\n\n  _setPiece(board, file, rank, piece, unicode=false) {\n    var row = board.rows[rank],\n        cell = row.cells[file];\n\n    removeNodeContent(cell);\n\n    //some polyfill (FF 24.3)\n    if(!(cell instanceof Node)) {\n      cell = ShadowDOMPolyfill.wrap(cell);\n    }\n\n    cell.appendChild(this._getPieceClone(piece, unicode));\n  }\n\n  _getPieceClone(piece, unicode=false){\n    var clone;\n    if(pieces[piece]) {\n      if(!unicode) {\n        clone = svgPieces[piece].content.cloneNode(true);\n      } else {\n        clone = pieces[piece].content.cloneNode(true);\n      }\n    } else {\n      clone = emptySquare.content.cloneNode(true);\n    }\n    return clone;\n  }\n\n  /**\n   * Set the current position.\n   * (appends a new board to this._rootBoard)\n   *\n   * @param {string} fen - a position string as FEN\n   */\n  set fen(fen) {\n    if(!fen) return;\n    if(fen === 'start') fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';\n\n    var clone = template.content.cloneNode(true),\n        // TODO: need better selectors in documentFragment.\n        board = clone.children[1],\n\n        rank = 0,\n        file = 0,\n        fenIndex = 0,\n\n        fenChar, piece, count, i;\n\n    while(fenIndex < fen.length){\n      fenChar = fen[fenIndex];\n      piece = null;\n\n      if(fenChar === ' '){\n        break; //ignore the rest\n      }\n      if(fenChar === '/'){\n        rank++;\n        file = 0;\n        fenIndex++;\n        continue;\n      }\n\n      if(isNaN(parseInt(fenChar, 10))) {\n        this._setPiece(board, file, rank, fenChar, this._unicode);\n        file++;\n      } else {\n        count = parseInt(fenChar, 10);\n        for(i = 0; i < count; i++) {\n          this._setPiece(board, file, rank, \"\", this._unicode);\n          file++;\n        }\n      }\n\n      fenIndex++;\n    }\n    removeNodeContent(this._boardRoot);\n    this._boardRoot.appendChild(clone);\n    this._board = this._boardRoot.querySelector(\".chessBoard\");\n  }\n\n  /**\n   * Get the current position as FEN.\n   */\n  get fen() {\n    var fen = [],\n        i, j, count, cell, piece;\n\n    for(i = 0; i < 8; i++) {\n      count = 0;\n      for(j=0; j < 8; j++) {\n        cell = this._board.rows[i].cells[j];\n        piece = cell.querySelector('[ascii]');\n\n        if(piece) {\n          if(count > 0) {\n            fen.push(count);\n            count = 0;\n          }\n          fen.push(piece.attributes.ascii.value);\n        } else {\n          count++;\n        }\n\n      }\n\n      if(count > 0) {\n        fen.push(count);\n      }\n      fen.push(\"/\");\n    }\n    fen.pop();\n    return fen.join(\"\");\n  }\n}\n\n// shim css\nif(Platform.ShadowCSS) {\n  var templateClone = template.content.cloneNode(true);\n  var frameClone = frameTemplate.content.cloneNode(true);\n  Platform.ShadowCSS.shimStyling(templateClone, \"chess-board\", \"\");\n  Platform.ShadowCSS.shimStyling(frameClone, \"chess-board\", \"\");\n}\n\n// export\n\nChessBoard.prototype.createdCallback = ChessBoard.prototype.constructor;\nChessBoard.prototype.attributeChangedCallback = ChessBoard.prototype.attributeChanged;\nChessBoard = document.registerElement('chess-board', ChessBoard);\n\nscope.ChessBoard = ChessBoard;  // es6, do I need this?\n\n})(window);\n","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                       $__placeholder__3)"]}